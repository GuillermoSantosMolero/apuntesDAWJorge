{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang3082{\fonttbl{\f0\fnil\fcharset0 Calibri;}{\f1\fnil Calibri;}}
{\colortbl ;\red0\green0\blue255;}
{\*\generator Riched20 10.0.18362}\viewkind4\uc1 
\pard\sa200\sl276\slmult1\qc\b\f0\fs32\lang10 DNS\par
\par

\pard\sa200\sl276\slmult1\b0\fs20 El DNS (Domain Name Server) o sistema de nombres de dominio es un sistema que hace legibles para los usuarios las direcciones IP. Para ello, asocia direcciones num\'e9ricas con direcciones alfanum\'e9ricas, como por ejemplo 173.194.34.16 con {{\field{\*\fldinst{HYPERLINK www.google.com }}{\fldrslt{www.google.com\ul0\cf0}}}}\f0\fs20 . El servidor DNS utiliza una base de datos distribuida y jer\'e1rquica que almacena informaci\'f3n asociada a nombres de dominio en redes como Internet. Al utilizar un nombre de dominio en lugar de una direcci\'f3n IP num\'e9rica para identificar una ubicaci\'f3n en Internet, es mucho m\'e1s f\'e1cil recordar y escribir direcciones web.\par
Paul Mockapetris (su creador) concibi\'f3 un sistema jer\'e1rquico similar a un sistema de archivos de ordenador. En esta estructura jer\'e1rquica defini\'f3 niveles, de la misma forma que en un sistema de archivos hay directorios.\par
El DNS se puede representar mediante una estructura jer\'e1rquica de topolog\'eda arb\'f3rea, es decir, todos los nombres forman un \'e1rbol invertido donde cada nodo se separa de los otros nodos por un punto.\par
Los nombres de dominio pueden estar formados por una o m\'e1s cadenas de caracteres separadas por puntos y no se distingue entre may\'fasculas y min\'fasculas. Cada parte separada por punto o nodo del \'e1rbol tendr\'e1 como m\'e1ximo 63 caracteres de longitud. Los nombres de dominio podr\'e1n tener hasta un m\'e1ximo de 127 niveles. El total de un nombre de dominio no puede exceder de los 255 caracteres.\ul\par
\ulnone Como consecuencia de la organizaci\'f3n jer\'e1rquica del espacio de nombres de dominios, podemos utilizar los t\'e9rminos dominio y subdominio.\par
Los dominios o subdominios que cuelgan del dominio ra\'edz se conocen como dominios de primer nivel o dominios de nivel superior (Top Level Domains, TLD), los que cuelgan de los dominios TLD se denominan dominios de segundo nivel y as\'ed sucesivamente.\par
La ICANN clasifica los dominios de nivel superior (Top Level Domain, TLD) en:\par
-->Gen\'e9ricos (gTLD): Su nombre est\'e1 relacionado con el prop\'f3sito o el tipo de organizaci\'f3n que lo utiliza. Se clasifican a su vez en:\par
-Dominios patrocinados (sTLD): Funcionan seg\'fan las reglas de la entidad patrocinadora.\par
-Dominios no patrocinados (uTLD): Funcionan seg\'fan las reglas del ICANN.\par
-->Geogr\'e1ficos (ccTLD): Sus nombres contienen s\'f3lo dos letras en funci\'f3n del pa\'eds o regi\'f3n. Las tareas de gesti\'f3n y reglas de uso se delegan a una entidad del pa\'eds o regi\'f3n.\par
-->De infraestructura (arpa): El dominio \'ab.arpa\'bb se utiliza para la infraestructura t\'e9cnica de Internet. La ICANN lo administra en cooperaci\'f3n con la comunidad t\'e9cnica de Internet bajo la direcci\'f3n de la IAB (Internet Architecture Board). Los dominios \'abin-addr-arpa.\'bb e \'abip6.arpa.\'bb se utilizan para la resoluci\'f3n inversa de direcciones.\par
-->Dominios reservados: Existen nombres de dominio de primer nivel reservados para pruebas y de ejemplo que no entran en conflicto con nombres TLD actuales o futuros. La ICANN administra el dominio ra\'edz y delega en otras organizaciones los dominios TLD. A su vez, las organizaciones que administran los dominios TLD, pueden delegar en otras organizaciones los dominios de segundo nivel.\par
\par
Los servidores de nombres almacenan y gestionan informaci\'f3n sobre los dominios y responden a las consultas de resoluci\'f3n de nombres que realizan los clientes. Estos servidores pueden implementarse sobre dispositivos dedicados o software ejecutado sobre m\'e1quinas que tambi\'e9n realizan otras tareas.\par
Las categor\'edas de servidores de nombres se diferencian por la cantidad de datos que almacenan:\par
--> Servidores autoritativos: son los encargados de almacenar la informaci\'f3n completa de la zona, por lo que debe haber al menos uno por zona. Normalemente existen dos o m\'e1s de estos servidores para prevenir futuros fallos que puedan surgir. En funci\'f3n de si los datos que contienen son originales o no, existen dos tipos de estos servidores:\par
\lang3082 -\f1\lang10  Servidor primario o maestro: es el servidor que mantiene los datos,\f0\lang3082  \f1\lang10 nombres DNS, originales de una zona completa. Per\f0\lang3082 m\f1\lang10 ite configurar\f0\lang3082  \f1\lang10 las zonas\f0\lang3082 .\f1\lang10\par
\f0\lang3082 -\f1\lang10  Servidor secundario o esclavo: este servidor copia los datos de la zona\f0\lang3082  \f1\lang10 mediante un proceso de replicaci\f0\'f3n denominado transferencia de zona.\par
- Servidores no autoritativos: son aquellos que no almacenan los datos de una zona completa. Seg\'fan la funci\'f3n que realizan, existen dos tipos de estos servidores:\par
\lang3082\tab\f1\lang10\bullet  Reenviador: \f0\lang3082 S\f1\lang10 e encarg\f0\lang3082 a\f1\lang10  de transmitir\f0\lang3082  \f1\lang10 hacia los servidores DNS de Internet\f0\lang3082  las peticiones\f1\lang10 . \f0\lang3082\tab R\f1\lang10 educci\f0\'f3n del tr\'e1fico en la conexi\'f3n a Internet.\par

\pard\li720\sa200\sl276\slmult1\f1\bullet  Cach\f0\'e9 : almacena durante un periodo de tiempo los resultados de las consultas enviadas por \'e9l mismo a otros servidores, si vuelve a recibir la misma petici\'f3n, el servidor la devolver\'e1 desde su cach\'e9 sin tener que realizar el proceso de consulta completo. Sirve para descongestionar servidores que reciben grandes cantidades de peticiones o zonas con alta carga en la red. \par
\par

\pard\sa200\sl276\slmult1 Seg\'fan el modo en que se env\'edan las consultas a un servidor DNS, las podemos clasificar en dos tipos:\par
- Consultas recursivas: cuando un cliente realiza una petici\'f3n recursiva a un servidor, este debe responder con la informaci\'f3n que guarda en su base de datos local. Si no la tiene, debe hacerse cargo de encontrarla en nombre del cliente, enviando nuevas peticiones a otros servidores. El cliente original solo env\'eda una petici\'f3n y recibe la informaci\'f3n o bien un mensaje de error indicando que no existe. Las consultas recursivas suelen generarlas los clientes DNS.\par
- Consultas iterativas: el servidor devuelve una respuesta a la petici\'f3n. Esta consiste en la direcci\'f3n IP correspondiente al nombre de dominio o bien en el nombre de otro servidor que tiene la informaci\'f3n o que est\'e1 m\'e1s cerca de ella. En este caso, el cliente original deber\'e1 empezar de nuevo el proceso enviando la consulta a ese otro servidor, el cual enviar\'e1 a su vez la respuesta solicitada o el nombre de un segundo servidor. Este proceso contin\'faa hasta encontrar el servidor adecuado. Las consultas iterativas suelen crearlas los servidores DNS cuando preguntan a otro servidor. \par
\par
Los clientes DNS (resolvers) son programas que hacen de interfaz entre las aplicaciones de usuario y el DNS. Un resolver recibe una petici\'f3n de un programa en forma de llamada al sistema operativo, y devuelve la informaci\'f3n en forma compatible con el formato de ese programa. El resolver se localiza en la misma m\'e1quina que la aplicaci\'f3n que requiere sus servicios, pero puede necesitar consultar servidores de nombre situados en otros equipos. Una de sus funciones m\'e1s importantes es eliminar retrasos en la red y aliviar la sobrecarga de consultas sobre los servidores de nombres. Esto lo hace mediante el uso de su cach\'e9, donde guarda temporalmente resultados de peticiones anteriores. \par
El trabajo del cliente es resolver las peticiones de las aplicaciones en el dispositivo cliente. Dependiendo de si lo que se busca es una direcci\'f3n IP o un nombre de dominio, existen dos tipos: resoluci\'f3n directa e inversa.\par
La resoluci\'f3n directa consiste en tomar como entrada un nombre de dominio y determinar su correspondiente direcci\'f3n IP. Esta es la funci\'f3n m\'e1s utilizada. Si un cliente DNS tiene la necesidad de localizar un equipo desde cualquier lugar del mundo, ser\'e1 necesario que realice una petici\'f3n a su servidor DNS. Lo m\'e1s probable es que su servidor no conozca ese dominio, por lo que empezar\'e1 buscando la ra\'edz del \'e1rbol, es decir, preguntando por la parte m\'e1s gen\'e9rica del nombre: .es. Si el servidor ra\'edz es autoritativo para esa zona, devolver\'e1 la direcci\'f3n IP correspondiente; sin embargo, si no lo es, devolver\'e1 el nombre del servidor responsable para el dominio de primer nivel (.es). Se deber\'e1 consultar a ese servidor si es autoritativo para su zona. Si no lo es, no conocer\'e1 la direcci\'f3n IP que buscamos, pero s\'ed al servidor autoritativo anterior. Y as\'ed continuaremos descendiendo en el \'e1rbol de dominios hasta localizar el servidor encargado de su zona o que, por tenerla en su cach\'e9, conozca la direcci\'f3n IP del equipo.\par
La resoluci\'f3n inversa se basa en el procedimiento contrario. A partir de una direcci\'f3n IP, se debe establecer el nombre de dominio asociado. El \'e1rbol jer\'e1rquico organiza la informaci\'f3n por nombres de dominio, lo que dificulta localizarlos en funci\'f3n de su direcci\'f3n IP. Sin embargo, la soluci\'f3n es f\'e1cil: consiste en estructurar la informaci\'f3n por direcciones IP, a\'f1adiendo un nodo especial llamado arpa. Se a\'f1ade un sub\'e1rbol con una jerarqu\'eda num\'e9rica que convive con la jerarqu\'eda de nombres de dominio. Ese sub\'e1rbol se implementa utilizando un nombre de dominio especial, in-addr.arpa, situado dentro del dominio reservado de primer nivel .arpa. Descendiendo, se despliega una jerarqu\'eda num\'e9rica que cubre todo el espacio de direcciones IP y que consiste en lo siguiente:\par
En el primer nivel dentro de in-addr.arpa existen 256 subdorninios, dentro de cada subdorninio de primer nivel hay 256 subdorninios m\'e1s de segundo nivel, organizados de la misma forma.  Una vez m\'e1s, cada uno de ellos contendr\'e1 otros 256 subdorninios de tercer nivel. Por \'faltimo, tendremos 256 equipos para cada uno de los anteriores, en el cuarto nivel, describiendo completamente la direcci\'f3n IP inversa.\par
\par
Base de datos DNS:  contiene los llamados archivos de zona, distribuidos entre los servidores de nombres. Estos archivos permiten asociar los nombres de dominio con direcciones IP. Los archivos de zona son ficheros de texto plano que almacenan registros de recursos o RR. Un RR est\'e1 formado por los siguientes campos:\par
- Propietario: indica el nombre del dominio en que se encuentra el recurso que se define en el RR. Si este campo aparece vac\'edo, toma el valor del campo del registro anterior.\par
- TTL (time to Iive): indica el tiempo de vida de este registro en la cach\'e9 de un servidor de nombres. Es un campo opcional.\par
- Clase: identifica la familia de protocolos que se debe utilizar. \par
- Tipo: indica el tipo de recurso para este registro.\par
- Datos: es el valor que se desea asociar al campo nombre de dominio. \par
Tipos de RR m\'e1s comunes para la clase IN que pueden aparecer en un archivo de zona: inicio de autoridad (RR SOA), Indica d\'f3nde comienza una zona y el servidor de nombres que tendr\'e1 su autoridad. Nombre de servidor (RR NS), define los servidores de nombres autoritarios para una zona. Direcci\'f3n (RR A), asocia nombres de dominio FQDN a direcciones IP. Nombre can\'f3nico (RR CNAME), permite crear un alias o nombre alternativo para un nombre de nodo real. Puntero (RR PTR), relaciona una direcci\'f3n IP con un nombre de dominio completamente cualificado. Intercambio de correo-e (RR MX), define un servidor de correo para el dominio.  \par
\par
Para la implementaci\'f3n del DNS en Linux debemos: instalar bind9 (synaptic), para los siguientes pasos utilizaremos la herramienta de webmin desde el navegador, crear una zona maestra de resoluci\'f3n directa, crear una zona maestra de resoluci\'f3n inversa, crear un registro de direcci\'f3n, crear un registro de alias (RR CNAME), crear un registro de correo (RR MX). \par
Para que un usuario pueda realizar consultas al servidor DNS que hemos creado debe tener en su configuraci\'f3n de red IPv4 el campo DNS la direcci\'f3n de nuestro servidor DNS.\par
\par
Para la instalaci\'f3n en Windows debemos: agregar la herramienta DNS  a nuestro servidor, a partir de ahora usaremos la herramienta de administrador de DNS: crear una zona de b\'fasqueda directa, una zona de b\'fasqueda inversa, un registro de recurso de direcci\'f3n (RR A), un registro de recurso de alias (RR CNAME),un registro de recurso de correo (RR MX).\par
Para que un cliente se pueda conectar pueda acceder a nuestro servidor DNS en Windows debe tener en su configuraci\'f3n de red IPv4 el campo DNS la direcci\'f3n de nuestro servidor DNS.\par
\par
\par
\par
\par
\par

\pard\sa200\sl276\slmult1\qc\b\fs32\par
\par
\par
\par
\par
MVC\par

\pard\sa200\sl276\slmult1\b0\fs20 MVC (Modelo-Vista-Controlador) es una propuesta de dise\'f1o de software utilizada para implementar sistemas donde se requiere el uso de interfaces de usuario. Surge de la necesidad de crear software m\'e1s robusto con un ciclo de vida m\'e1s adecuado, donde se potencie la facilidad de mantenimiento, reutilizaci\'f3n del c\'f3digo y la separaci\'f3n de conceptos.\par
-Modelo: este componente se encarga de manipular, gestionar y actualizar los datos. Si se utiliza una base de datos aqu\'ed es donde se realizan las consultas, b\'fasquedas, filtros y actualizaciones.\par
-Vista: este componente se encarga de mostrarle al usuario final las pantallas, ventanas, p\'e1ginas y formularios; el resultado de una solicitud. Desde la perspectiva del programador este componente es el que se encarga del frontend; la programaci\'f3n de la interfaz de usuario si se trata de un aplicaci\'f3n de escritorio, o bien, la visualizaci\'f3n de las p\'e1ginas web (CSS, HTML, HTML5 y Javascript).\par
-Controlador: este componente se encarga de gestionar las instrucciones que se reciben, atenderlas y procesarlas. Por medio de \'e9l se comunican el modelo y la vista: solicitando los datos necesarios; manipul\'e1ndolos para obtener los resultados; y entreg\'e1ndolos a la vista para que pueda mostrarlos.\par
La implementaci\'f3n se realiza de forma modular. Sus vistas muestran informaci\'f3n actualizada siempre. El programador no debe preocuparse de solicitar que las vistas se actualicen, ya que este proceso es realizado autom\'e1ticamente por el modelo de la aplicaci\'f3n. Cualquier modificaci\'f3n que afecte al dominio, como aumentar m\'e9todos o datos contenidos, implica una modificaci\'f3n s\'f3lo en el modelo y las interfaces del mismo con las vistas, no todo el mecanismo de comunicaci\'f3n y de actualizaci\'f3n entre modelos. Las modificaciones a las vistas no afectan al modelo de dominio, simplemente se modifica la representaci\'f3n de la informaci\'f3n, no su tratamiento. MVC est\'e1 demostrando ser un patr\'f3n de dise\'f1o bien elaborado pues las aplicaciones que lo implementan presentan una extensibilidad y una mantenibilidad \'fanicas comparadas con otras aplicaciones basadas en otros patrones. \par
Para desarrollar una aplicaci\'f3n bajo el patr\'f3n de dise\'f1o MVC es necesario una mayor dedicaci\'f3n en los tiempos iniciales del desarrollo. Normalmente el patr\'f3n exige al programador desarrollar un mayor n\'famero de clases que, en otros entornos de desarrollo, no son necesarias. No obstante posteriormente, en la etapa de mantenimiento de la aplicaci\'f3n, una aplicaci\'f3n MVC es mucho m\'e1s mantenible, extensible y modificable que una aplicaci\'f3n que no lo implementa. MVC requiere la existencia de una arquitectura inicial sobre la que se deben construir clases e interfaces para modificar y comunicar los m\'f3dulos de una aplicaci\'f3n. Esta arquitectura inicial debe incluir, por lo menos, un mecanismo de eventos para poder proporcionar las notificaciones que genera el modelo de aplicaci\'f3n; una clase Modelo, otra clase Vista y una clase Controlador gen\'e9ricas que realicen todas las tareas de comunicaci\'f3n, notificaci\'f3n y actualizaci\'f3n que ser\'e1n luego transparentes para el desarrollo de la aplicaci\'f3n. MVC es un patr\'f3n de dise\'f1o orientado a objetos por lo que su implementaci\'f3n es sumamente costosa y dif\'edcil en lenguajes que no siguen este paradigma. \par
\par

\pard\sa200\sl276\slmult1\qr Guillermo Santos Molero, VS2DAW\par
}
 